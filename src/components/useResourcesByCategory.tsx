import { useEffect, useState } from 'react';
import axios from 'axios';

import { TResource } from '../types';

type TCategoryStub =
  | 'food'
  | 'health'
  | 'hygiene'
  | 'job_training'
  | 'resources'
  | 'shelters'
  | 'social_services'
  | 'transit'
  | 'wifi';

interface TUser {
  id: string; // database ObjectId converted to hex string
  name?: string;
  email: string;
  providers: ['facebook' | 'google'];
  isAdmin: boolean;
  isSuperAdmin: boolean;
}

interface TAddress {
  address1: string;
  address2?: string;
  city: string;
  state: string;
  zip: string;
}

type TDay =
  | 'Monday'
  | 'Tuesday'
  | 'Wednesday'
  | 'Thursday'
  | 'Friday'
  | 'Saturday'
  | 'Sunday';

type TSchedulePeriod =
  | 'Last'
  | 'First'
  | 'Second'
  | 'Third'
  | 'Fourth'
  | 'Fifth';
interface TScheduleBase {
  _id?: 'string';
  day?: TDay;
  date?: string;
  period?: TSchedulePeriod;
  from?: string;
  to?: string;
}

export interface TSchedule extends TScheduleBase {
  scheduleType: TScheduleType;
}

export type TScheduleType = 'Weekly' | 'Monthly' | 'Open 24/7' | 'Date Range';

type TCloseScheduleType = TScheduleType | 'Permanently Closed';

interface TCloseSchedule extends TScheduleBase {
  scheduleType: TCloseScheduleType;
}

export interface TCategory {
  _id: string;
  color: string;
  createdAt: Date;
  lastModifiedAt: Date;
  name: string;
  stub: string;
  subcategories: TSubcategory[];
}

interface TSubcategory {
  _id: 'string';
  createdAt: Date;
  lastModifiedAt: Date;
  name: string;
  parentCategory: TCategory;
  resources?: TResource[]; // not returned unless specifically asked for
  stub: string;
}

interface TResourceNew {
  address: TAddress;
  createdBy?: TUser; // id of the user who created this
  closeSchedule: TCloseSchedule[];
  createdAt: Date;
  deleted: boolean; // We leave entries in the DB so they don't get resynced from Strapped, but for all intents & purposes this resource doesn't exist.
  description: string;
  id: string; // this is NOT the ID auto-generated by Mongoose (_id)
  kudos: number;
  lastModifiedAt: Date;
  latitude: number;
  legacyId?: string; // ID from strappd
  longitude: number;
  name: string;
  phone: string;
  schedule: TSchedule[];
  services: string[]; // maps from servicetype
  subcategories: TSubcategory[];
  website: string;
}

interface TResourcesByCategoryResponse {
  category: TCategory;
}

// TODO: use specific category types
const useCategory = (category: TCategoryStub): null | TResourceNew[] => {
  const [resourcesByCategory, setResourcesByCategory] = useState<
    null | TResourceNew[]
  >(null);

  useEffect(() => {
    if (category) {
      const getResourceByCategory = async (): Promise<void> => {
        try {
          const { data } = await axios.get<TResourcesByCategoryResponse>(
            `https://upswyng-server.herokuapp.com/api/category/${category}`
          );
          if (!data.category) {
            throw new Error(
              'no category found in resources by category response'
            );
          }

          const {
            category: { subcategories }
          } = data;
          if (!subcategories.length) {
            throw new Error(
              'no sub-categories found in resources by category response'
            );
          }

          const resources = subcategories.reduce<TResourceNew[]>(
            (categoryResources, subcategory) => {
              const { resources: subcategoryResources } = subcategory;
              if (!subcategoryResources || !subcategoryResources.length) {
                return categoryResources;
              }

              return categoryResources.concat(categoryResources);
            },
            []
          );

          const uniqueResources = [...new Set(resources)];

          console.log(uniqueResources);

          setResourcesByCategory(uniqueResources);
        } catch (err) {
          console.log(err);
          // TODO: log this error
        }
      };

      getResourceByCategory();
    }
  }, [category]);

  return resourcesByCategory;
};

export default useCategory;
